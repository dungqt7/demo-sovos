{"ast":null,"code":"import * as FIELDSNAMES from './calculationSetupConstants';\n\nvar validateSovosBasicText = function validateSovosBasicText(text) {\n  var textError = '';\n\n  if (text) {\n    if (text.length > 40) {\n      textError = 'Maximun character limit is 40';\n    } else {\n      var patt = new RegExp(/^[a-zA-Z0-9\\-\\/]+$/);\n\n      if (!patt.test(text)) {\n        textError = 'Allowed character a-z A-Z 0-9 -/';\n      }\n    }\n  }\n\n  return textError;\n};\n\nvar validateSovosAmountNumber = function validateSovosAmountNumber(amount) {\n  var amountError = '';\n\n  if (isNaN(amount)) {\n    amountError = 'This field must be a number';\n  } else {\n    var patt = new RegExp(/^\\d{1,12}(\\.\\d{1,8})?$/);\n\n    if (!patt.test(amount)) {\n      amountError = 'Character Limit: 12 characters before the decimal point and 8 characters after';\n    }\n  }\n\n  return amountError;\n};\n\nvar calculationSetupValidate = function calculationSetupValidate(values) {\n  var errors = {};\n  /* Validate document number field name */\n\n  errors[FIELDSNAMES.DOCUMENT_NUMBER_FIELD_NAME] = validateSovosBasicText(values[FIELDSNAMES.DOCUMENT_NUMBER_FIELD_NAME]);\n  /* Validate Additional fields */\n\n  errors[FIELDSNAMES.ADDITIONAL_FIELDS_NAME] = [];\n  var additionalFields = values[FIELDSNAMES.ADDITIONAL_FIELDS_NAME];\n  errors[FIELDSNAMES.ADDITIONAL_FIELDS_NAME] = additionalFields.map(function (field) {\n    return validateAdditionalField(field);\n  });\n  return errors;\n};\n\nvar validateDiscounts = function validateDiscounts(discounts) {\n  return discounts.map(function (discount) {\n    return {\n      amount: validateSovosAmountNumber(discount.amount)\n    };\n  });\n};\n\nvar validateAdditionalField = function validateAdditionalField(field) {\n  switch (field.type) {\n    case FIELDSNAMES.CUSTOMS_DUTIES_FIELD_NAME:\n      {\n        return {\n          amount: validateSovosAmountNumber(field.amount)\n        };\n      }\n\n    case FIELDSNAMES.DELYVERY_AMOUNT_FIELD_NAME:\n      {\n        return {\n          amount: validateSovosAmountNumber(field.amount)\n        };\n      }\n\n    case FIELDSNAMES.DELYVERY_INSURANCE_FIELD_NAME:\n      {\n        return {\n          amount: validateSovosAmountNumber(field.amount)\n        };\n      }\n\n    case FIELDSNAMES.TRANSACTION_SOURCE_FIELD_NAME:\n      {\n        return {\n          transactionSource: validateSovosBasicText(field.transactionSource)\n        };\n      }\n\n    case FIELDSNAMES.DISCOUNTS_FIELDS_NAME:\n      {\n        return {\n          discounts: validateDiscounts(field.discounts)\n        };\n      }\n\n    default:\n      {\n        return {};\n      }\n  }\n};\n\nexport default calculationSetupValidate;","map":{"version":3,"sources":["C:\\SD10001918\\Development\\Branches\\main-source\\src\\tax-calculator\\components\\CalculationSetup\\calculationSetupValidate.js"],"names":["FIELDSNAMES","validateSovosBasicText","text","textError","length","patt","RegExp","test","validateSovosAmountNumber","amount","amountError","isNaN","calculationSetupValidate","values","errors","DOCUMENT_NUMBER_FIELD_NAME","ADDITIONAL_FIELDS_NAME","additionalFields","map","field","validateAdditionalField","validateDiscounts","discounts","discount","type","CUSTOMS_DUTIES_FIELD_NAME","DELYVERY_AMOUNT_FIELD_NAME","DELYVERY_INSURANCE_FIELD_NAME","TRANSACTION_SOURCE_FIELD_NAME","transactionSource","DISCOUNTS_FIELDS_NAME"],"mappings":"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","sourcesContent":["import * as FIELDSNAMES from './calculationSetupConstants';\r\n\r\nconst validateSovosBasicText = (text) => {\r\n  let textError = '';\r\n  if (text) {\r\n    if (text.length > 40) {\r\n      textError = 'Maximun character limit is 40';\r\n    } else {\r\n      const patt = new RegExp(/^[a-zA-Z0-9\\-\\/]+$/);\r\n      if (!patt.test(text)) {\r\n        textError = 'Allowed character a-z A-Z 0-9 -/';\r\n      }\r\n    }\r\n  }\r\n  return textError;\r\n}\r\n\r\nconst validateSovosAmountNumber = (amount) => {\r\n  let amountError = '';\r\n  if (isNaN(amount)) {\r\n    amountError = 'This field must be a number';\r\n  } else {\r\n    const patt = new RegExp(/^\\d{1,12}(\\.\\d{1,8})?$/);\r\n    if (!patt.test(amount)) {\r\n      amountError = 'Character Limit: 12 characters before the decimal point and 8 characters after';\r\n    }\r\n  }\r\n  return amountError\r\n}\r\n\r\n\r\nconst calculationSetupValidate = (values) => {\r\n  const errors = {};\r\n\r\n  /* Validate document number field name */\r\n  errors[FIELDSNAMES.DOCUMENT_NUMBER_FIELD_NAME] =\r\n    validateSovosBasicText(values[FIELDSNAMES.DOCUMENT_NUMBER_FIELD_NAME]);\r\n\r\n\r\n  /* Validate Additional fields */\r\n  errors[FIELDSNAMES.ADDITIONAL_FIELDS_NAME] = [];\r\n  const additionalFields = values[FIELDSNAMES.ADDITIONAL_FIELDS_NAME];\r\n  errors[FIELDSNAMES.ADDITIONAL_FIELDS_NAME] = additionalFields.map(field => {\r\n      return validateAdditionalField(field)\r\n    }\r\n  );\r\n\r\n  return errors;\r\n};\r\nconst validateDiscounts = (discounts) => {\r\n  return discounts.map((discount) => {\r\n    return { amount: validateSovosAmountNumber(discount.amount) }\r\n  })\r\n}\r\n\r\nconst validateAdditionalField = (field) => {\r\n  switch (field.type) {\r\n    case FIELDSNAMES.CUSTOMS_DUTIES_FIELD_NAME: {\r\n      return { amount: validateSovosAmountNumber(field.amount) }\r\n    }\r\n\r\n    case FIELDSNAMES.DELYVERY_AMOUNT_FIELD_NAME: {\r\n      return { amount: validateSovosAmountNumber(field.amount) }\r\n    }\r\n    case FIELDSNAMES.DELYVERY_INSURANCE_FIELD_NAME: {\r\n      return { amount: validateSovosAmountNumber(field.amount) };\r\n    }\r\n    case FIELDSNAMES.TRANSACTION_SOURCE_FIELD_NAME: {\r\n      return { transactionSource: validateSovosBasicText(field.transactionSource) };\r\n    }\r\n    case FIELDSNAMES.DISCOUNTS_FIELDS_NAME: {\r\n      return { discounts: validateDiscounts(field.discounts) }\r\n    }\r\n\r\n    default: {\r\n      return {}\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default calculationSetupValidate;\r\n"]},"metadata":{},"sourceType":"module"}