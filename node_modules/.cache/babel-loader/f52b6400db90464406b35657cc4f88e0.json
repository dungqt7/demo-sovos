{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapChildToParentPropsFactory = exports.getChildContents = exports.filterOutChildrenByType = exports.findChildrenByType = exports.findChildByType = void 0;\n\nvar _react = require(\"react\");\n/**\r\n * Finds the first child in a collection of React children that matches the type\r\n * @param {React.ReactNode} children\r\n * @param {string | React.ComponentClass} type\r\n * @return {React.ReactNode | undefined}\r\n */\n\n\nvar findChildByType = function findChildByType(children, type) {\n  return _react.Children.toArray(children).find(function (child) {\n    return child.type === type;\n  });\n};\n\nexports.findChildByType = findChildByType;\n\nvar findChildrenByType = function findChildrenByType(children, type) {\n  return _react.Children.toArray(children).filter(function (child) {\n    return child.type === type;\n  });\n};\n/**\r\n * Modifies a collection of React children by omitting children of specific type(s)\r\n * @param {React.ReactNode} children\r\n * @param {...string | ...React.ComponentClass} type\r\n * @return {[React.ReactNode]}\r\n */\n\n\nexports.findChildrenByType = findChildrenByType;\n\nvar filterOutChildrenByType = function filterOutChildrenByType(children) {\n  for (var _len = arguments.length, types = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    types[_key - 1] = arguments[_key];\n  }\n\n  return _react.Children.toArray(children).filter(function (child) {\n    return !types.includes(child.type);\n  });\n};\n/**\r\n * Extracts contents from a child of a specific type from a collection of React children\r\n * @param {React.ReactNode} children\r\n * @param {string | React.ComponentClass} type\r\n * @return {React.ReactNode | undefined}\r\n */\n\n\nexports.filterOutChildrenByType = filterOutChildrenByType;\n\nvar getChildContents = function getChildContents(children, type) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var child = findChildByType(children, type);\n  return child !== undefined ? child.props.children : defaultValue;\n};\n\nexports.getChildContents = getChildContents;\n\nvar mapChildToParentPropsFactory = function mapChildToParentPropsFactory(type, map) {\n  return function (children) {\n    var child = findChildByType(children, type);\n    if (!child) return {};\n    var childPropKeys = Object.keys(child.props);\n    return Object.keys(map).reduce(function (parentProps, childPropKey) {\n      if (childPropKeys.includes(childPropKey)) {\n        parentProps[map[childPropKey]] = child.props[childPropKey];\n      }\n\n      return parentProps;\n    }, {});\n  };\n};\n\nexports.mapChildToParentPropsFactory = mapChildToParentPropsFactory;","map":null,"metadata":{},"sourceType":"script"}